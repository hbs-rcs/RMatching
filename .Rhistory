data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
options(max.print = 1000)
cobalt::bal.tab(m_cem_out,
data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
cobalt::bal.tab(m_cem_out,
data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
cobalt::love.plot(m_cem_out,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"),
data = nsw_PSID_cem,
# threshold = c(m = .5, ks = .25),
binary = "std",
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
colors = c("red", "blue"))
options(max.print = 100)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("rmarkdown")
library(rmarkdown)
# install.packages("MatchIt")
library(MatchIt) # for ???
# install.packages("RItools")
library(RItools) # for displaying balance statistics
# install.packages("cobalt")
library(cobalt) # for displaying balance statistics
## Data is hosted on one of the authors' web-site (Dehejia)
## Note that their data set is a subset of the original data, excluding subject with missing information
## on prior earnings
nsw_dw <- haven::read_dta("http://www.nber.org/~rdehejia/data/nsw_dw.dta")
PSID <- haven::read_dta("http://www.nber.org/~rdehejia/data/psid_controls.dta")
## If the server seems overloaded, please load locally:
# nsw_dw <- haven::read_dta("data/nsw_dw.dta")
# PSID <- haven::read_dta("data/psid_controls.dta")
# Examine the NSW data
dim(nsw_dw)
str(nsw_dw)
head(nsw_dw)
summary(nsw_dw)
table(nsw_dw$treat)
# Examine the PSID data
dim(PSID)
str(PSID)
head(PSID)
summary(PSID)
##
##
# Marginal difference between means
marg_mod <- lm(re78 ~ treat, data=nsw_dw)
summary(marg_mod)
confint(marg_mod)
# Treatment effect using regression adjustment
cond_mod <- lm(re78 ~ treat + age + education + black + hispanic + nodegree + married + re74 + re75,
data = nsw_dw)
summary(cond_mod)
confint(cond_mod)
options(max.print = 100)
# install.packages("tidyverse")
library(tidyverse)
# install.packages("rmarkdown")
library(rmarkdown)
# install.packages("MatchIt")
library(MatchIt) # for ???
# install.packages("RItools")
library(RItools) # for displaying balance statistics
# install.packages("cobalt")
library(cobalt) # for displaying balance statistics
## Data is hosted on one of the authors' web-site (Dehejia)
## Note that their data set is a subset of the original data, excluding subject with missing information
## on prior earnings
nsw_dw <- haven::read_dta("http://www.nber.org/~rdehejia/data/nsw_dw.dta")
PSID <- haven::read_dta("http://www.nber.org/~rdehejia/data/psid_controls.dta")
## If the server seems overloaded, please load locally:
# nsw_dw <- haven::read_dta("data/nsw_dw.dta")
# PSID <- haven::read_dta("data/psid_controls.dta")
# Examine the NSW data
dim(nsw_dw)
str(nsw_dw)
head(nsw_dw)
summary(nsw_dw)
table(nsw_dw$treat)
# Examine the PSID data
dim(PSID)
str(PSID)
head(PSID)
summary(PSID)
##
##
# Marginal difference between means
marg_mod <- lm(re78 ~ treat, data=nsw_dw)
summary(marg_mod)
confint(marg_mod)
# Treatment effect using regression adjustment
cond_mod <- lm(re78 ~ treat + age + education + black + hispanic + nodegree + married + re74 + re75,
data = nsw_dw)
summary(cond_mod)
confint(cond_mod)
xBal_res <- RItools::xBalance(treat ~ .,
data = nsw_dw %>% select(-data_id, -re78),
report="all")
xBal_res
# round(xBal_res$result,4)
bal_res <- cobalt::bal.tab(nsw_dw %>% select(-data_id, -re78),
treat = nsw_dw$treat,
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
bal_res
# cobalt package has the most intuitive visualization routines
cobalt::bal.plot(nsw_dw %>% select(-data_id, -re78),
treat = nsw_dw$treat,
var.name = "age")
cobalt::bal.plot(nsw_dw,
treat = nsw_dw$treat,
var.name = "education",
type = "histogram")
cobalt::bal.plot(nsw_dw,
treat = nsw_dw$treat,
var.name = "nodegree")
nsw_PSID <- nsw_dw %>%
filter(treat==1) %>%
bind_rows(PSID)
summary(nsw_PSID)
sum(nsw_PSID$treat)
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"))
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"))
m_cem_out
cobalt::bal.tab(m_cem_out,
data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
cobalt::love.plot(m_cem_out,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"),
data = nsw_PSID_cem,
# threshold = c(m = .5, ks = .25),
binary = "std",
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
colors = c("red", "blue"))
m_cem_out$breaks
nsw_PSID_cem %>% filter(treat == 1) %>% select(education) %>% summary
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% summary
nsw_PSID_cem$re74 %>% sort
options(max.print = 1000)
nsw_PSID_cem$re74 %>% sort
nsw_PSID_cem$re74 %>% summary
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% summary
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% .$re74 %>% hist
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% filter(re75>0) %>% .$re74 %>% hist
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% filter(re75>0) %>% .$re74 %>% summary
nsw_PSID_cem %>% filter(treat == 1) %>% select(re74,re75) %>% filter(re74>0) %>% .$re74 %>% summary
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 1, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"),
cutpoints = list(education = edu_cut,
re74 = re_cut,
re75 = re_cut),)
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 1, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"),
cutpoints = list(education = edu_cut,
re74 = re_cut,
re75 = re_cut))
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 1, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"))
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"),
cutpoints = list(education = edu_cut,
re74 = re_cut,
re75 = re_cut))
m_cem_out
m_cem_out$breaks
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"))
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"),
cutpoints = list(education = edu_cut,
re74 = re_cut,
re75 = re_cut))
m_cem_out
m_cem_out$breaks
cobalt::bal.tab(m_cem_out,
data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
cobalt::love.plot(m_cem_out,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"),
data = nsw_PSID_cem,
# threshold = c(m = .5, ks = .25),
binary = "std",
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
colors = c("red", "blue"))
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"))
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"),
cutpoints = list(education = edu_cut,
#re74 = re_cut,
re75 = re_cut))
m_cem_out
m_cem_out$breaks
cobalt::bal.tab(m_cem_out,
data =  nsw_PSID_cem, # Note, that data must be specified if we work with `cem` objects
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
cobalt::love.plot(m_cem_out,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"),
data = nsw_PSID_cem,
# threshold = c(m = .5, ks = .25),
binary = "std",
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
colors = c("red", "blue"))
m_cem_out
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"),
cutpoints = list(education = edu_cut,
re75 = re_cut))
plot(m_cem_out)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1)
??
relax.cem
library(cem)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1)
m_cem_out
## While not as consequential for propensity-score matching, it is important to preprocess the
## data set before running CEM and identify all non-numeric covariates to ensure correct "binning"
nsw_PSID_cem <-
nsw_PSID %>%
mutate_at(vars(black, hispanic, married, nodegree), ~as.factor(.)) %>%
as.data.frame
## It is also advised to prespecify relevant cutpoints for continuous covariates
edu_cut <- c(0, 6.5, 8.5, 12.5, 17)
re_cut <- c(0, 1, 2500, 5000, 7500, 10000, 15000, 20000, 50000, 100000, 200000)
cem::imbalance(group = nsw_PSID_cem$treat,
data  = nsw_PSID_cem,
drop  = c("treat", "re78", "data_id"))
m_cem_out <-
cem::cem(treatment = "treat",
data = nsw_PSID_cem,
verbose = TRUE,
keep.all = TRUE,
drop = c("re78", "data_id"),
cutpoints = list(education = edu_cut,
re75 = re_cut))
m_cem_out
# m_cem_out$breaks
m_cem_out
m_cem_out$drop
m_cem_out$n.strata''
m_cem_out$n.strata
m_cem_out$n
m_cem_out$n.groups
m_cem_out$tab
m_cem_out$tab[2,]
m_cem_out$tab["Unmatched",]
m_cem_out$tab["Unmatched","G1"]
m_cem_out
m_cem_out$matched
m_cem_out$tab
m_cem_out$k2k
m_cem_out$w
?att
?est
?att
prog_cem
names(prog_cem)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1, ,
drop  = c("treat", "re78", "data_id"))
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1, fixed = "re78")
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1)
plot(prog_cem)
?relax.cem
prog_cem
prog_cem
sum(prog_cem$G0!=prog_cem$G1)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1, minimal = 2)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1, minimal = list(education = 2, age = 2, re75 = 1))
prog_cem
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1, minimal = list(education = 2, age = 2, re75 = 2))
prog_cem
m_NNM_out
?MatchIt
?match.data
m.data.NNM <- MatchIt::match.data(m_NNM_out)
m.data.NNM
m.data.NNM <- MatchIt::match.data(m_NNM_out)
summary(m.data.NNM)
m.data.NNM <- MatchIt::match.data(m_NNM_out)
summary(m.data.NNM)
m.data.NNM$treat %>% table
# Treatment effect using regression adjustment
NNM_mod <- lm(re78 ~ treat + age + education + black + hispanic + nodegree + married + re74 + re75,
data = m.data.NNM)
summary(NNM_mod)
confint(NNM_mod)
##
prog_cem  <- relax.cem(m_cem_out, nsw_PSID_cem, depth = 1)
prog_cem
##
est <- att(m_cem_out,
re78 ~ treat + age + education + black + hispanic + nodegree + married + re74 + re75,
data = nsw_PSID_cem)
sum_cem_out
m_cem_out
est
##
est <- att(m_cem_out,
re78 ~ treat + age + education + black + hispanic + nodegree + married + re74 + re75,
data = nsw_PSID_cem)
summary(est)
?matchit
#
m_NNM_out <- MatchIt::matchit(treat ~ age + education + black + hispanic +
married + nodegree + re74 + re75,
data = nsw_PSID,
discard = T)
#
m_NNM_out <- MatchIt::matchit(treat ~ age + education + black + hispanic +
married + nodegree + re74 + re75,
data = nsw_PSID,
discard = "both")
summary(m_NNM_out) # Can add standardize = TRUE
## `cobalt` package offers additional summaries of distributional differences
## Note that it can process objects returned my matchit()!
cobalt::bal.tab(m_NNM_out,
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
#
m_NNM_out <- MatchIt::matchit(treat ~ age + education + black + hispanic +
married + nodegree + re74 + re75,
data = nsw_PSID) # Try discard = "both"
summary(m_NNM_out) # Can add standardize = TRUE
## `cobalt` package offers additional summaries of distributional differences
## Note that it can process objects returned my matchit()!
cobalt::bal.tab(m_NNM_out,
disp.means = T,
disp.sds = T,
stats = c("mean.diffs", "variance.ratios", "ks.statistics"))
s.out <- summary(m_NNM_out, standardize = TRUE)
# The default plotting capabilities of `MatchIt` are unimpressive
plot(s.out, interactive = F)
# Compare the distribution of propensity scores before and after matching
plot(m_NNM_out, type = "hist")
?
plot
?love.plot
cobalt::love.plot(m_NNM_out,
stats = c("mean.diffs", "ks.statistics"),
threshold = c(m = .5, ks = .25),
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
position = "top",
colors = c("red", "blue"))
# Propensity Scores before and after weighting; which = "both"
cobalt::bal.plot(m_NNM_out,
var.name = "distance",
which = "both",
type = "histogram",
mirror = TRUE)
cobalt::love.plot(m_NNM_out,
stats = c("mean.diffs", "ks.statistics"),
threshold = c(m = .5, ks = .25),
binary = "std",
abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
position = "top",
colors = c("red", "blue"))
# Propensity Scores before and after weighting; which = "both"
cobalt::bal.plot(m_NNM_out,
var.name = "distance",
which = "both",
type = "histogram",
mirror = TRUE)
cobalt::love.plot(m_NNM_out,
stats = c("mean.diffs", "ks.statistics"),
threshold = c(m = .5, ks = .25),
binary = "std", #display standardized mean difference for all of the covariates
#abs = TRUE,
var.order = "unadjusted",
grid = T,
sample.names = c("Unmatched", "Matched"),
position = "top",
colors = c("red", "blue"))
# Propensity Scores before and after weighting; which = "both"
cobalt::bal.plot(m_NNM_out,
var.name = "distance",
which = "both",
type = "histogram",
mirror = TRUE)
?cem
?att
##
est <- att(m_cem_out,
re78 ~ treat + age + education + black +
hispanic + nodegree + married + re74 + re75,
data = nsw_PSID_cem)
summary(est)
setwd("~/Desktop/Causal Inference Workshops/RMatching")
nsw_dw <- haven::read_dta("data/nsw_dw.dta")
